#+TITLE: Emacs Config
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Eoin Carney"
      user-mail-address "eoincarney0@gmail.com")
#+END_SRC
* Appearance
** Font and Theme
#+BEGIN_SRC emacs-lisp
(setq doom-font
    (font-spec :family "GoMono Nerd Font" :size 16)
    ;; (font-spec :family "FuraMono Nerd Font" :size 16)
    mixed-pitch-set-height 20
    doom-variable-pitch-font (font-spec :family "ETBembo" :size 20))
(setq-default line-spacing 0.3)

(setq doom-theme 'doom-nord)
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
    (let* ((banner
    '(" Y88b      /     "
    "  Y88b    /      "
    "   Y88b  /       "
    "    Y888/        "
    "     Y8/         "
    "      Y          "))

    (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
    (point)
    (dolist (line banner (point))
    (insert (+doom-dashboard--center
    +doom-dashboard--width
    (concat
    line (make-string (max 0 (- longest-line (length line)))
    32)))
    "\n"))
    'face 'doom-dashboard-banner)))

;; (unless (display-graphic-p) ; for some reason this messes up the graphical splash screen atm
    (setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn)

(custom-set-faces!
    '(doom-dashboard-banner :foreground "slategray"))
#+END_SRC
* General Settings
** Misc
+ Modeline word count - DISABLED - slows down org significantly in larger files
+ Time in modeline
+ Set opacity here so it works with Xcompmgr
+ Relative line numbers
+ Scroll Margin
+ Map j/k as gj/gk
+ open .gmi in markdown mode
+ mixed pitch mode for markdown mode :refile:
+ Rebind for eshell
+ Auto save (super save)
+ No line numbers
#+BEGIN_SRC emacs-lisp
;; (setq doom-modeline-enable-word-count t)
(display-time-mode 1)
(add-to-list 'default-frame-alist '(alpha . 90))
(setq display-line-numbers-type 'relative
    scroll-margin 5)
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
(add-to-list 'auto-mode-alist '("\\.gmi\\'" . markdown-mode))
(add-hook! markdown-mode 'mixed-pitch-mode)
(map! :n "SPC o t" 'eshell)
(super-save-mode 1)
(setq super-save-when-idle t)
(setq display-line-numbers-type nil)
#+END_SRC
** Encryption
+ Enable [[https://orgmode.org/worg/org-tutorials/encrypting-files.html][encryption]]
#+begin_src emacs-lisp
(require 'epa-file)
(epa-file-enable)
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)
#+end_src
** Buffer Previews
Maybe not really necessary
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
    evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
    :after '(evil-window-split evil-window-vsplit)
    (+ivy/switch-buffer))
(setq +ivy-buffer-preview t)
#+end_src
** Browsers
Set qutebrowser as default and elpher start page
#+begin_src emacs-lisp
(setq browse-url-generic-program "/usr/bin/qutebrowser")
(setq browse-url-browser-function 'browse-url-generic)
(setq elpher-start-page-url "gemini://warmedal.se/~antenna/")
#+end_src
* Org
** Directories and misc
#+BEGIN_SRC emacs-lisp
    (setq org-directory "~/Dropbox/sci/"
    org-roam-directory (concat org-directory "notes/")
    bibtex-completion-bibliography (concat org-directory "lib.bib"))

(add-to-list 'org-modules 'org-id)
(require 'ox-gemini)
#+END_SRC
** Extra keybindings
#+begin_src emacs-lisp
(map!
    :n "<f5>" 'org-agenda
    :n "<f6>" (lambda() (interactive)(find-file (concat org-directory "todo.org")))
    :n "<f7>" (lambda() (interactive)(find-file (concat org-directory "notes/20211019-projects.org")))
    :n "<f8>" (lambda() (interactive)(find-file (concat org-directory "notes/20211019-actions.org")))
    :n "<f9>" '+calendar/open-calendar)
#+end_src
** To-do keywords
#+BEGIN_SRC emacs-lisp
(after! org
    (setq org-todo-keywords
    '((sequence "TODO(t)"
    "TT"
    "PROJ(p)"
    "NEXT(n)"
    "PROG(i!/!)"
    "WAIT(w)"
    "SOMEDAY(s)"
    "RLX(r)"
    "STUCK(x)"
    "BUY(b)"
    "|"
    "DONE(d!/!)"
    "CANCELLED(c!/!)"))))
#+END_SRC
** Org Agenda
#+begin_src emacs-lisp
(setq gtd/next-action-head "Next actions"
    gtd/waiting-head "Waiting on"
    gtd/project-head "Projects"
    gtd/shop-head "Shopping"
    gtd/someday-head "Someday/maybe")

(setq org-agenda-custom-commands
    '(
    ("g" "GTD view"
    (
    (todo "TT" ((org-agenda-overriding-header gtd/next-action-head)))
    (agenda "" ((org-agenda-span 'day)
    (org-agenda-start-day 'nil))) ;; this is needed because doom starts agenda with day set to -3d
    (todo "PROJ" ((org-agenda-overriding-header gtd/project-head)))
    (todo "WAIT" ((org-agenda-overriding-header gtd/waiting-head)))
    (todo "BUY"  ((org-agenda-overriding-header gtd/shop-head)))
    (todo "SOMEDAY" ((org-agenda-overriding-header gtd/someday-head)))))))
#+end_src
** Aesthetics
Org superstar and changing height of headings

The =add-hook!= used to be =after! org= but the title never loaded properly. The add hook seems to fix it, but I should still look into a better way to do it...
Seems to slow down the first time you open an org file, but then no delay.
*** Org mode hook
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode #'org-superstar-mode #'org-pretty-table-mode #'org-appear-mode)
#+end_src
*** Heading Face Sizes
#+BEGIN_SRC emacs-lisp
(add-hook! org-mode
    (setq org-hidden-keywords '(title))
    (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
    (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-4 nil :inherit 'org-level-8 :height 1.1)
    (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.12)
    (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.25)
    (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.4)
    (set-face-attribute 'org-document-title nil :inherit 'org-level-8 :height 2.0 :foreground 'unspecified)
    (setq org-n-level-faces 4)
    (setq org-cycle-level-faces nil))
#+END_SRC
*** Bullets and keyword faces
#+begin_src emacs-lisp
(after! org
    (setq org-superstar-headline-bullets-list '("◉" "○" "✹" "◦"))
    ;; Other bullets I liked: "❁" "❃" "✹" "✦" "❁" "◉" "○" "◦" "♠" "♥" "♦" "♣"
    (setq org-superstar-special-todo-items t)
    (setq org-superstar-todo-bullet-alist '(
    ("TODO" . 9744)
    ("TT"   . 9744)
    ("NEXT" . 9744)
    ("CONFIG" . 9744)
    ("DONE" . 9747)))
    (setq org-ellipsis " ▼")
    (setq org-list-demote-modify-bullet
    '(("+" . "*")("*" . "-")("-" . "+")))
    (setq org-todo-keyword-faces '(
    ("TODO" . "#b16286")
    ("TT"   . "#b16286")
    ("PROJ" . "#83a598")
    ("WAIT" . "#a89984")
    ("SOMEDAY" . "#8ec07c"))))
#+end_src
** Capture templates - Org and Org Roam
#+begin_src emacs-lisp
(customize-set-variable 'org-capture-templates '(
    ("t" "Task")
    ("tt" "TT" entry (id "cd9ffc7d-d197-4521-b74d-4b1f93b301ca")
    "* TT %?\n%i\n%a" :prepend t)
    ("ti" "Inbox (Store Link)" entry (file+headline +org-capture-todo-file "Inbox")
    "* TODO %?\n%i\n%a" :prepend t)
    ("to" "Inbox (No Link)" entry (file+headline +org-capture-todo-file "Inbox")
    "* TODO %?\n%i" :prepend t)
    ("p" "Project")
    ("pp" "Project" entry (id "a359813e-8bde-463d-8406-0d5fa76357dd")
    "* PROJ %?\n%i- [ ] Next Action:\n%a" :prepend t)
    ("pb" "Project (Blog)" entry (id "a359813e-8bde-463d-8406-0d5fa76357dd")
    "* PROJ %? :blog:\n%i- [ ] Next Action:\n%a" :prepend t)
    ("pf" "Project (Fiction)" entry (id "a359813e-8bde-463d-8406-0d5fa76357dd")
    "* PROJ %? :fiction:\n%i- [ ] Next Action:\n%a" :prepend t)
    ("pc" "Project (Config)" entry (id "a359813e-8bde-463d-8406-0d5fa76357dd")
    "* PROJ %? :config:\n%i- [ ] Next Action:\n%a" :prepend t)))
(after! org-roam
    (setq org-roam-capture-templates
    '(("d" "default" plain "#+created: %u\n#+filetags: %^G\n\n* ${title}\n%?"
    :target (file+head "%<%Y%m%d>-${slug}.org"
    "#+title: ${title}\n")
    :unnarrowed t
    :jump-to-captured t)
    ("e" "encrypted" plain "#+created: %u\n#+filetags: %^G\n\n* ${title}\n%?"
    :target (file+head "%<%Y%m%d>-${slug}.org.gpg"
    "#+title: ${title}\n")
    :unnarrowed t
    :jump-to-captured t)
    ("r" "reference" plain "#+created: %u\n#+filetags: %^G\n\n* ${title}\n%?"
    :target (file+head "ref/%<%Y%m%d>-${slug}.org"
    "#+title: ${title}\n")
    :unnarrowed t
    :jump-to-captured t)
    ("q" "quick" plain "#+created: %u\n#+filetags: %^G\n\n%?"
    :target (file+head "%<%Y%m%d>-${slug}.org"
    "#+title: ${title}\n")
    :unnarrowed t)
    ;; Other roam directories
    ("p" "work person" plain (file "~/Dropbox/work/templates/people.org")
    :target (file "${slug}.org.gpg")
    :unnarrowed t)
    ("l" "The Landlord")
    ("lc" "llord - chapter" plain (file "~/Dropbox/llord/templates/chapt.org")
    :target (file+head "chapters/${slug}.org"
    "#+title: ${title}\n")
    :jump-to-captured t
    :unnarrowed t)
    ("lp" "llord - character" plain (file "~/Dropbox/llord/templates/char.org")
    :target (file+head "%<%Y%m%d>-${slug}.org"
    "#+title: ${title}\n")
    :jump-to-captured t
    :unnarrowed t)))
    (setq org-roam-dailies-capture-templates
    '(("d" "default" entry "* %<%H:%M> -  [[id:477e986a-2fba-4982-8158-b309baf0b14b][%?]]"
    :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")))))
    ;;;;;;;;;;;;;;;;;;;
    ;; Unused
    ;; ("a" "aws" plain "#+created: %u\n#+filetags:training:SSA-CO2\n"
    ;;  :target (file+head "%<%Y%m%d>-${slug}.org"
    ;;                     "#+title: ${title}\n")
    ;;  :unnarrowed t
    ;;  :jump-to-captured t)
    ;; ("c" "ccna" plain "#+created: %u\n#+filetags:training:ccna\n"
    ;;  :target (file+head "%<%Y%m%d>-${slug}.org"
    ;;                     "#+title: ${title}\n")
    ;;  :unnarrowed t
    ;;  :jump-to-captured t)
    ;; ("b" "bridge" plain "#+filetags: bridge\n\n* Question :drill:\n%?\n** Answer"
    ;;  :target (file+head "bridge/${slug}.org"
    ;;                     "#+title: ${title}\n")
    ;;  :unnarrowed t)
    ;; ("t" "test" plain (file "~/Dropbox/sci/notes/templates/test.org")
    ;;  :target (file+head "%<%Y%m%d>-${slug}.org"
    ;;                     "#+title: ${title}\n")
    ;;   :unnarrowed t)))
    ;;;;;;;
#+end_src
** Org Roam
*** Org Roam V2
#+begin_src emacs-lisp
(use-package! org-roam
    :defer t
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-graph-viewer "/usr/bin/qutebrowser")
    :config
    (org-roam-setup))
(setq org-roam-completion-everywhere t)
#+end_src
*** Buffer
Adding the hook seems to fix the problem of the buffer not loading in the right place on start-up. It still doesn't load properly the first time you open a roam file, but does so on the second file (good enough for now).
#+begin_src emacs-lisp
(add-hook! 'org-roam-mode-hook (add-to-list 'display-buffer-alist
    '("\\*org-roam\\*"
    (display-buffer-in-side-window)
    (side . right)
    (slot . 0)
    (window-width . 0.33)
    (window-parameters . ((no-other-window . t)
    (no-delete-other-windows . t))))))
#+end_src
*** Keybindings
#+begin_src emacs-lisp
(map! :map org-roam-mode-map
    :leader
    :prefix "r"
    :desc "Find Note"         "r"     'org-roam-node-find
    :desc "Insert Note"       "i"     'org-roam-node-insert
    :desc "Toggle Buffer"     "b"     'org-roam-buffer-toggle
    :desc "Add Tag"           "t"     'org-roam-tag-add
    :desc "Bibtex Link"       "c"     'orb-insert-link)
(map! :map org-roam-mode-map
    :leader
    :prefix "r d"
    :desc "Daily Capture"     "c"     'org-roam-dailies-capture-today
    :desc "Daily Find"        "f"     'org-roam-dailies-find-directory
    :desc "Daily Today"       "t"     'org-roam-dailies-find-today
    :desc "Daily Date"        "d"     'org-roam-dailies-goto-date)
#+end_src
*** Temporary fix for tag display
See issue here: [[https://github.com/org-roam/org-roam/issues/1728][github issue]]
#+begin_src emacs-lisp
(setq org-roam-node-display-template "${title:*} ${tags:30}") ;the format here is $(field-name:length). Including the 'length' integer causes the alignment of the tags to the right, ommitting it leaves them on the left.
#+end_src
*** Org-roam bibtex
#+begin_src emacs-lisp
(use-package! org-roam-bibtex
    :after org-roam
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :config
    (require 'org-ref))
#+end_src
*** Org Roam UI
#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)
(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
    org-roam-ui-follow t
    org-roam-ui-update-on-save t))
#+end_src
* Packages
** Load Path for manual packages
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/manual-packages")
#+end_src
** Elfeed
#+BEGIN_SRC emacs-lisp
(setq-default elfeed-search-filter "@1-week-ago +unread ")
(use-package! elfeed-org
    :after elfeed
    :init
    (setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org")))
(require 'elfeed-goodies)
    (elfeed-goodies/setup)
    (setq elfeed-goodies/entry-pane-size 0.7)
#+END_SRC
** Mail
*** Gmail
#+begin_src emacs-lisp
(after! mu4e
(setq mu4e-get-mail-command "offlineimap")
(setq mu4e-update-interval 300)
(setq mail-user-agent 'mu4e-user-agent)

(setq mu4e-sent-folder "/[Gmail].Sent Mail")
(setq mu4e-drafts-folder "/[Gmail].Drafts")
(setq mu4e-trash-folder "/[Gmail].Bin")
(setq mu4e-maildir-shortcuts
    '((:maildir "/INBOX"      :key ?i)))
(setq user-mail-address "eoincarney0@gmail.com"
    user-full-name "Eoin Carney")
(setq sendmail-program "/usr/bin/msmtp"
    send-mail-function 'smtpmail-send-it
    message-sendmail-f-is-evil t
    message-sendmail-extra-arguments '("--read-envelope-from")
    message-send-mail-function 'message-send-mail-with-sendmail))
#+end_src

** ERC
Seems to only work in emacs 28+
#+begin_src emacs-lisp
(defun tildechat ()
    (interactive)
    (erc-tls :server "irc.tilde.chat"
    :port 6697
    :nick "eoin"
    :full-name "eoin carney"
    :client-certificate
    '("/home/eoin/.certs/erc.key"
    "/home/eoin/.certs/erc.crt")))
(defun liberachat ()
    (interactive)
    (erc-tls :server "irc.libera.chat"
    :port 6697
    :nick "loopdreams"
    :full-name "loopdreams"
    :client-certificate
    '("/home/eoin/.certs/erc.key"
    "/home/eoin/.certs/erc.crt")))
#+end_src
** Ledger
#+begin_src emacs-lisp
(defun ledger-clean-and-save ()
  (interactive)
  (ledger-mode-clean-buffer)
  (save-buffer))
(map! :localleader
      (:map ledger-mode-map
      "c" #'ledger-clean-and-save))
(add-to-list 'auto-mode-alist '("\\.dat\\'" . ledger-mode))
#+end_src
* Html
#+begin_src emacs-lisp
(set-file-template! "\\.html$" :trigger "__spoolfive.html" :mode 'web-mode)
#+end_src
* Writing
** Centered-point mode
#+begin_src emacs-lisp
(defcustom centered-point-position 0.45
    "Percentage of screen where `centered-point-mode' keeps point."
    :type 'float)

(setq centered-point--preserve-pos nil)

(define-minor-mode centered-point-mode
    "Keep the cursor at `centered-point-position' in the window"
    :lighter " centerpoint"
    (cond (centered-point-mode (add-hook 'post-command-hook 'center-point nil t)
    (setq centered-point--preserve-pos
    scroll-preserve-screen-position)
    (setq-local scroll-preserve-screen-position 'all))
    (t (remove-hook 'post-command-hook 'center-point t)
    (setq-local scroll-preserve-screen-position
    centered-point--preserve-pos))))

(defun center-point ()
    "Move point to the line at `centered-point-position'."
    (interactive)
    (when (eq (current-buffer) (window-buffer))
    (let ((recenter-positions (list centered-point-position)))
    (recenter-top-bottom))))

(defun centered-point-mode-on ()
    (centered-point-mode 1))

(define-globalized-minor-mode global-centered-point-mode centered-point-mode
    centered-point-mode-on)
#+end_src
** Writing Settings
Disabled the 'centered point mode' hook for now. It started getting in the way too much (when 'zoomed in'). Also 'zz/zt/zb' basically enable a similar kind of functionality, but with more control, for writing.
#+BEGIN_SRC emacs-lisp
(map! :leader
    "Z" 'display-fill-column-indicator-mode
    "z" 'display-line-numbers-mode
    "t o" 'olivetti-mode)

;; (add-hook! (writeroom-mode olivetti-mode) 'centered-point-mode-on)
;; (add-hook! 'writeroom-mode-enable-hook '(lambda () (display-line-numbers-mode -1)))
(remove-hook! (writeroom-mode) #'+zen-enable-mixed-pitch-mode-h) ;; added this since mixed-pitch is defaul on most 'writing' files (org, md). Otherwise, when exiting writeroom mode, font switched back to fixed-pitch

#+END_SRC
** Prose Liniting with Vale
#+begin_src emacs-lisp
(flycheck-define-checker vale
    "A checker for prose"
    :command ("vale" "--output" "line"
    source)
    :standard-input nil
    :error-patterns
    ((error line-start (file-name) ":" line ":" column ":" (id (one-or-more (not (any ":")))) ":" (message) line-end))
    :modes (markdown-mode org-mode text-mode)
    )
(add-to-list 'flycheck-checkers 'vale 'append)
(setq flycheck-checker-error-threshold 2000)

#+end_src
