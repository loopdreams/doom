#+TITLE: Emacs Config

* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Eoin Carney"
      user-mail-address "eoin@spool-five.com")
#+END_SRC

* Font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "FiraMono Nerd Font" :size 20)
      doom-variable-pitch-font (font-spec :family "Source Sans Variable" :size 22)
      mixed-pitch-set-height 22)

#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
;; (setq doom-theme 'doom-miramare)
(setq doom-theme 'doom-one)
#+END_SRC
* General Settings
+ Modeline word count
+ Time in modeline
+ Set opacity here so it works with Xcompmgr
+ Scroll Margin
+ Relative line numbers
+ Gnutls-verify-error is for browsing gemini with elpher. There is probably a better way of doing this.
+ Setup for buffer selection and previews when opening split window (is this necessary?)
+ Set qutebrowser as default url handler
+ Map J/K as gj/gk
+ Org IDs
+ Remove /home as project root
+ open .gmi in markdown mode
+ bibtex completion list
+ Org roam completion
+ Battery
#+BEGIN_SRC emacs-lisp
(setq doom-modeline-enable-word-count t)
(display-time-mode 1)
(doom/set-frame-opacity 90)
(setq display-line-numbers-type 'relative
      scroll-margin 2)

(setq gnutls-verify-error 'nil)

(setq browse-url-generic-program "/usr/bin/qutebrowser")
(setq browse-url-browser-function 'browse-url-generic)

(setq org-ref-default-bibliography
      '("~/sci/lib.bib"))
(setq bibtex-completion-bibliography
      '("~/sci/lib.bib"))
(setq org-roam-completion-everywhere t)
(setq evil-vsplit-window-right t
      evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
(setq +ivy-buffer-preview t)


(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

(add-to-list 'org-modules 'org-id)

(after! projectile
  (setq projectile-project-root-files-bottom-up
        (remove ".git" projectile-project-root-files-bottom-up)))

(add-to-list 'auto-mode-alist '("\\.gmi\\'" . markdown-mode))

(unless (string-match-p "^Power N/A" (battery))
  (display-battery-mode 1))

#+END_SRC
* Org
** Org directory
#+BEGIN_SRC emacs-lisp
 (setq org-directory "~/sci/"
       org-roam-directory (concat org-directory "notes/"))
#+END_SRC
** Capture templates
#+begin_src emacs-lisp
(customize-set-variable 'org-capture-templates '(
      ("t" "Personal todo" entry (file+headline +org-capture-todo-file "Inbox")
       "* TODO %?\n%i\n%a" :prepend t)
      ("n" "Personal notes" entry (file+headline +org-capture-notes-file "Inbox")
       "* %u %?\n%i\n%a" :prepend t)
      ("c" "Config Todo" entry (id "05774d4c-565c-4cd8-8f32-ccefe997a75a")
       "* CONFIG %?\n%i\n%a" :prepend t)
      ("j" "Journal" entry (file+olp+datetree +org-capture-journal-file)
       "* %U %?\n%i\n%a" :prepend t)
      ("i" "Blog Idea" entry (id "9d9237c9-e79c-465b-9c10-2d75b6b4fdb0")
       "* IDEA %u %?\n%i" :prepend t)
      ("f" "Fiction Idea" entry (id "8a5272ce-9e99-4786-b645-942c942031c8")
       "* IDEA %u %?\n%i" :prepend t)))
#+end_src

** Extra keybindings
#+begin_src emacs-lisp
(map!
 :n "<f5>" 'org-agenda-list
 :n "<f6>" (lambda() (interactive)(find-file "~/sci/todo.org"))
 :n "<f7>" '+calendar/open-calendar)
#+end_src
** Aesthetics
Org superstar and changing height of headings
#+BEGIN_SRC emacs-lisp

(require 'org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

(after! org
  (setq org-hidden-keywords '(title))
  (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
  (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.02) ;\large
  (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.07) ;\Large
  (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.328) ;\LARGE
  (setq org-cycle-level-faces nil)
  (setq org-n-level-faces 4)
  (set-face-attribute 'org-document-title nil
                      :height 2.074
                      :foreground 'unspecified
                      :inherit 'org-level-8))

(add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode)
#+END_SRC
** To-do keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "CONFIG(c)" "WAIT(w)" "IDEA(i)" "BLOG(b)" "READ(r)" "|" "DONE(d)" "CANCELLED(c)")))
(setq hl-todo-keyword-faces '(
        ("TODO" . "#ebdbb2")
        ("WAIT" . "#ebdbb2")
        ("BLOG" . "#689d6a")
        ("IDEA" . "#689d6a")
        ("READ" . "#689d6a")
        ("CONFIG" . "#689d6a")))
#+END_SRC
** Org Roam
*** Temporary fix for tag display
See issue here: [[https://github.com/org-roam/org-roam/issues/1728][github issue]]
#+begin_src emacs-lisp
(setq org-roam-node-display-template "${title} ${tags}")
#+end_src
*** Org Roam V2
#+begin_src emacs-lisp
(use-package! org-roam
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-graph-viewer "/usr/bin/qutebrowser")
  :config
  (org-roam-setup))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(map! :map org-roam-mode-map
      :leader
      :n "r r" 'org-roam-node-find
      :n "r i" 'org-roam-node-insert
      :n "r b" 'org-roam-buffer-toggle
      :n "r t" 'org-roam-tag-add
      :n "r c" 'orb-insert-link)
#+end_src
*** Buffer
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-side-window)
               (side . right)
               (slot . 0)
               (window-width . 0.33)
               (window-parameters . ((no-other-window . t)
                                     (no-delete-other-windows . t)))))
#+end_src

*** Capture Template
This still isn't working the way I used to have it.
- The tag auto completion doesn't work.
- Can't enter on a new line /after/ the org header (or even two lines after the head)
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-capture-templates
        '(("d" "default" plain "#+created: %u\n#+filetags: %^G\n\n* ${title}\n%?"
           :if-new (file+head "%<%Y%m%d>-${slug}.org"
                              "#+title: ${title}\n")
           :unnarrowed t
           :jump-to-captured t)
          ("q" "quick" plain "#+created: %u\n#+filetags: %^G\n\n%?"
           :if-new (file+head "%<%Y%m%d>-${slug}.org"
                              "#+title: ${title}\n")
           :unnarrowed t)
          ("w" "witness" plain "#+created: %u\n#+filetags: %^G\n\n%?"
           :if-new (file+head "witness_${slug}.org"
                              "#+title: ${title}\n")
           :jump-to-captured t
           :unnarrowed t)
          ("t" "test" plain (file "~/sci/notes/templates/test.org")
           :if-new (file+head "%<%Y%m%d>-${slug}.org"
                              "#+title: ${title}\n")
            :unnarrowed t))))
#+end_src
*** Org-roam bibtex
#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (require 'org-ref))

#+end_src
*** Org Roam UI
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t))
#+end_src
*** Deft
#+begin_src emacs-lisp
(setq deft-extensions '("txt" "tex" "org" "md")
      deft-directory "~/sci/notes"
      deft-recursive t
      deft-use-filename-as-title t)
#+end_src
* Elfeed
#+BEGIN_SRC emacs-lisp
(setq-default elfeed-search-filter "@1-week-ago +unread ")
(use-package! elfeed-org
  :after elfeed
  :init
  (setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org")))

(require 'elfeed-goodies)
        (elfeed-goodies/setup)
        (setq elfeed-goodies/entry-pane-size 0.7)

#+END_SRC

* Dashboard

#+BEGIN_SRC emacs-lisp
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
  (let* ((banner
            '(" Y88b      /     "
              "  Y88b    /      "
              "   Y88b  /       "
              "    Y888/        "
              "     Y8/         "
              "      Y          "))

         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))

;; (unless (display-graphic-p) ; for some reason this messes up the graphical splash screen atm
  (setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn)

(custom-set-faces!
  '(doom-dashboard-banner :foreground "slategray"))
#+END_SRC

* Mail
Outgoing mail settings. Set to use msmtp.
#+BEGIN_SRC emacs-lisp
(setq sendmail-program "/usr/bin/msmtp"
      send-mail-function 'smtpmail-send-it
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-send-mail-function 'message-send-mail-with-sendmail)
#+END_SRC

* Writing mode
Things to include with zen/writerroom mode (Space-t-z/Z)
Check if the 'add-command-properties' is needed:
- run 'export' (latex)
- use 'repeat'
#+BEGIN_SRC emacs-lisp
(after! evil
  (evil-add-command-properties 'org-export-dispatch :repeat nil)
  (evil-add-command-properties 'org-latex-export-to-pdf :repeat nil))

;; (setq +zen-text-scale 0.8)
(map! :leader
    :m "Z" 'display-fill-column-indicator-mode
    :m "z" 'display-line-numbers-mode)

(defcustom centered-point-position 0.35
  "Percentage of screen where `centered-point-mode' keeps point."
  :type 'float)

(setq centered-point--preserve-pos nil)

(define-minor-mode centered-point-mode
  "Keep the cursor at `centered-point-position' in the window"
  :lighter " centerpoint"
  (cond (centered-point-mode (add-hook 'post-command-hook 'center-point nil t)
                             (setq centered-point--preserve-pos
                                   scroll-preserve-screen-position)
                             (setq-local scroll-preserve-screen-position 'all))
        (t (remove-hook 'post-command-hook 'center-point t)
           (setq-local scroll-preserve-screen-position
                       centered-point--preserve-pos))))


(defun center-point ()
  "Move point to the line at `centered-point-position'."
  (interactive)
  (when (eq (current-buffer) (window-buffer))
    (let ((recenter-positions (list centered-point-position)))
      (recenter-top-bottom))))

(defun centered-point-mode-on ()
  (centered-point-mode 1))

(define-globalized-minor-mode global-centered-point-mode centered-point-mode
  centered-point-mode-on)
(add-hook 'writeroom-mode-hook 'centered-point-mode)
(add-hook 'olivetti-mode-on-hook 'centered-point-mode)

(map! :leader
      :n "t o" 'olivetti-mode)
#+END_SRC
